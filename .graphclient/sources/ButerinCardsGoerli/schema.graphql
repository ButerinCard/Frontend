schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Card {
  id: ID!
  dateMined: BigInt!
  miner: String!
  colorId: BigInt!
  phaseId: BigInt!
  tokenIdInPhase: BigInt!
  quoteId: BigInt!
  seed: BigInt!
  lastTokenIdInScan: BigInt!
}

input Card_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  dateMined: BigInt
  dateMined_not: BigInt
  dateMined_gt: BigInt
  dateMined_lt: BigInt
  dateMined_gte: BigInt
  dateMined_lte: BigInt
  dateMined_in: [BigInt!]
  dateMined_not_in: [BigInt!]
  miner: String
  miner_not: String
  miner_gt: String
  miner_lt: String
  miner_gte: String
  miner_lte: String
  miner_in: [String!]
  miner_not_in: [String!]
  miner_contains: String
  miner_contains_nocase: String
  miner_not_contains: String
  miner_not_contains_nocase: String
  miner_starts_with: String
  miner_starts_with_nocase: String
  miner_not_starts_with: String
  miner_not_starts_with_nocase: String
  miner_ends_with: String
  miner_ends_with_nocase: String
  miner_not_ends_with: String
  miner_not_ends_with_nocase: String
  colorId: BigInt
  colorId_not: BigInt
  colorId_gt: BigInt
  colorId_lt: BigInt
  colorId_gte: BigInt
  colorId_lte: BigInt
  colorId_in: [BigInt!]
  colorId_not_in: [BigInt!]
  phaseId: BigInt
  phaseId_not: BigInt
  phaseId_gt: BigInt
  phaseId_lt: BigInt
  phaseId_gte: BigInt
  phaseId_lte: BigInt
  phaseId_in: [BigInt!]
  phaseId_not_in: [BigInt!]
  tokenIdInPhase: BigInt
  tokenIdInPhase_not: BigInt
  tokenIdInPhase_gt: BigInt
  tokenIdInPhase_lt: BigInt
  tokenIdInPhase_gte: BigInt
  tokenIdInPhase_lte: BigInt
  tokenIdInPhase_in: [BigInt!]
  tokenIdInPhase_not_in: [BigInt!]
  quoteId: BigInt
  quoteId_not: BigInt
  quoteId_gt: BigInt
  quoteId_lt: BigInt
  quoteId_gte: BigInt
  quoteId_lte: BigInt
  quoteId_in: [BigInt!]
  quoteId_not_in: [BigInt!]
  seed: BigInt
  seed_not: BigInt
  seed_gt: BigInt
  seed_lt: BigInt
  seed_gte: BigInt
  seed_lte: BigInt
  seed_in: [BigInt!]
  seed_not_in: [BigInt!]
  lastTokenIdInScan: BigInt
  lastTokenIdInScan_not: BigInt
  lastTokenIdInScan_gt: BigInt
  lastTokenIdInScan_lt: BigInt
  lastTokenIdInScan_gte: BigInt
  lastTokenIdInScan_lte: BigInt
  lastTokenIdInScan_in: [BigInt!]
  lastTokenIdInScan_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Card_filter]
  or: [Card_filter]
}

enum Card_orderBy {
  id
  dateMined
  miner
  colorId
  phaseId
  tokenIdInPhase
  quoteId
  seed
  lastTokenIdInScan
}

type Miner {
  id: ID!
  kiloBytes: BigInt!
}

input Miner_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  kiloBytes: BigInt
  kiloBytes_not: BigInt
  kiloBytes_gt: BigInt
  kiloBytes_lt: BigInt
  kiloBytes_gte: BigInt
  kiloBytes_lte: BigInt
  kiloBytes_in: [BigInt!]
  kiloBytes_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Miner_filter]
  or: [Miner_filter]
}

enum Miner_orderBy {
  id
  kiloBytes
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  miner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Miner
  miners(
    skip: Int = 0
    first: Int = 100
    orderBy: Miner_orderBy
    orderDirection: OrderDirection
    where: Miner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Miner!]!
  card(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Card
  cards(
    skip: Int = 0
    first: Int = 100
    orderBy: Card_orderBy
    orderDirection: OrderDirection
    where: Card_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Card!]!
  totalUploaded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalUploaded
  totalUploadeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalUploaded_orderBy
    orderDirection: OrderDirection
    where: TotalUploaded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalUploaded!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  miner(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Miner
  miners(
    skip: Int = 0
    first: Int = 100
    orderBy: Miner_orderBy
    orderDirection: OrderDirection
    where: Miner_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Miner!]!
  card(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Card
  cards(
    skip: Int = 0
    first: Int = 100
    orderBy: Card_orderBy
    orderDirection: OrderDirection
    where: Card_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Card!]!
  totalUploaded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TotalUploaded
  totalUploadeds(
    skip: Int = 0
    first: Int = 100
    orderBy: TotalUploaded_orderBy
    orderDirection: OrderDirection
    where: TotalUploaded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TotalUploaded!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TotalUploaded {
  id: ID!
  kiloBytes: BigInt!
}

input TotalUploaded_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  kiloBytes: BigInt
  kiloBytes_not: BigInt
  kiloBytes_gt: BigInt
  kiloBytes_lt: BigInt
  kiloBytes_gte: BigInt
  kiloBytes_lte: BigInt
  kiloBytes_in: [BigInt!]
  kiloBytes_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TotalUploaded_filter]
  or: [TotalUploaded_filter]
}

enum TotalUploaded_orderBy {
  id
  kiloBytes
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}